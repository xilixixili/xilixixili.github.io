<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu18.04 深度学习环境配置（nvidia驱动，cuda，pytorch）</title>
      <link href="/2020/07/20/ubuntu18-04-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88nvidia%E9%A9%B1%E5%8A%A8%EF%BC%8Ccuda%EF%BC%8Cpytorch%EF%BC%89/"/>
      <url>/2020/07/20/ubuntu18-04-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%88nvidia%E9%A9%B1%E5%8A%A8%EF%BC%8Ccuda%EF%BC%8Cpytorch%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu18-04-安装-深度学习环境（nvidia驱动，cuda，pytorch）"><a href="#Ubuntu18-04-安装-深度学习环境（nvidia驱动，cuda，pytorch）" class="headerlink" title="Ubuntu18.04 安装 深度学习环境（nvidia驱动，cuda，pytorch）"></a>Ubuntu18.04 安装 深度学习环境（nvidia驱动，cuda，pytorch）</h1><p>说明：新装ubuntu18.04</p><h2 id="一、安装nvidia驱动"><a href="#一、安装nvidia驱动" class="headerlink" title="一、安装nvidia驱动"></a>一、安装nvidia驱动</h2><h3 id="1-安装前的准备"><a href="#1-安装前的准备" class="headerlink" title="1. 安装前的准备"></a>1. 安装前的准备</h3><h4 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h4><ul><li>找到合适本机GPU的版本</li><li>去官网下载（官网，官网，官网）通常命名规则 NVIDIA-Linux-x86_64-xxx.xx.run</li></ul><h4 id="删除原有驱动"><a href="#删除原有驱动" class="headerlink" title="删除原有驱动"></a>删除原有驱动</h4><pre><code>sudo apt-get remove --purge nvidia*  </code></pre><h4 id="禁用nouv驱动"><a href="#禁用nouv驱动" class="headerlink" title="*禁用nouv驱动"></a>*禁用nouv驱动</h4><pre><code>sudo gedit /etc/modprobe.d/blacklist.conf</code></pre><p>编辑 /etc/modprobe.d/blacklist-nouveau.conf 文件，添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line">alias nouveau off</span><br><span class="line">alias lbm-nouveau off</span><br></pre></td></tr></table></figure><p>然后保存。<br>关闭nouveau：<br>    echo options nouveau modeset=0 | sudo tee -a /etc/modprobe.d/nouveau-kms.conf</p><h4 id="！-重启"><a href="#！-重启" class="headerlink" title="！ 重启"></a>！ 重启</h4><h4 id="验证nouveau是否成功禁用"><a href="#验证nouveau是否成功禁用" class="headerlink" title="验证nouveau是否成功禁用"></a>验证nouveau是否成功禁用</h4><pre><code>lsmod | grep nouveau</code></pre><p>没有信息显示，说明nouveau已被禁用</p><h3 id="2-安装驱动"><a href="#2-安装驱动" class="headerlink" title="2. 安装驱动"></a>2. 安装驱动</h3><p>==由于新装ubuntu系统中可能没有以下*内容，需要安装。==</p><h4 id="获取kernel-source"><a href="#获取kernel-source" class="headerlink" title="*获取kernel source"></a>*获取kernel source</h4><pre><code>sudo apt-get install linux-sourceuname -r #查询下面命令的x.x.x-x sudo apt-get install linux-headers-x.x.x-x-generic</code></pre><h4 id="安装gcc"><a href="#安装gcc" class="headerlink" title="*安装gcc"></a>*安装gcc</h4><pre><code>sudo apt-get updatesudo apt-get install gcc</code></pre><h5 id="gcc-介绍。。。-未完待续"><a href="#gcc-介绍。。。-未完待续" class="headerlink" title="gcc 介绍。。。(未完待续)"></a>gcc 介绍。。。(未完待续)</h5><p><a href="https://yunyaniu.blog.csdn.net/article/details/83189032" target="_blank" rel="noopener">gcc介绍</a></p><h4 id="安装make"><a href="#安装make" class="headerlink" title="*安装make"></a>*安装make</h4><pre><code>sudo apt-get updatesudo apt-get install ubuntu-makesudo apt-get install make</code></pre><h5 id="make-介绍。。。-未完待续"><a href="#make-介绍。。。-未完待续" class="headerlink" title="make 介绍。。。(未完待续)"></a>make 介绍。。。(未完待续)</h5><p><a href="https://yunyaniu.blog.csdn.net/article/details/86548796" target="_blank" rel="noopener">make介绍</a></p><h4 id="2-1-正式安装开始"><a href="#2-1-正式安装开始" class="headerlink" title="2.1 正式安装开始"></a>2.1 正式安装开始</h4><h5 id="给驱动run文件赋予执行权限"><a href="#给驱动run文件赋予执行权限" class="headerlink" title="给驱动run文件赋予执行权限"></a>给驱动run文件赋予执行权限</h5><pre><code>sudo chmod  a+x NVIDIA-Linux-x86_64-418.56.run</code></pre><h5 id="闪亮登场"><a href="#闪亮登场" class="headerlink" title="闪亮登场"></a>闪亮登场</h5><pre><code>sudo ./NVIDIA-Linux-x86_64-396.18.run -no-x-check -no-nouveau-check -no-opengl-files </code></pre><p><strong>注:</strong></p><ul><li>-no-x-check：安装驱动时关闭X服务</li><li>-no-nouveau-check：安装驱动时禁用nouveau</li><li>-no-opengl-files：只安装驱动文件，不安装OpenGL文件  </li></ul><p>注：如果出现循环登陆的问题，需要关闭图形界面： </p><pre><code>sudo service lightdm stop      //这个是关闭图形界面，不执行会出错。</code></pre><h4 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h4><pre><code>nvidia-smi</code></pre><h4 id="！重启"><a href="#！重启" class="headerlink" title="！重启"></a>！重启</h4><p>以上只能确保在我使用的机子上安装成功！：）<br>另外感谢<br><a href="https://blog.csdn.net/lihe4151021/article/details/90083431" target="_blank" rel="noopener">此篇博客</a></p><hr><h2 id="二、安装cuda"><a href="#二、安装cuda" class="headerlink" title="二、安装cuda"></a>二、安装cuda</h2><h3 id="1-安装前准备"><a href="#1-安装前准备" class="headerlink" title="1.安装前准备"></a>1.安装前准备</h3><h4 id="下载驱动-1"><a href="#下载驱动-1" class="headerlink" title="下载驱动"></a>下载驱动</h4><ul><li>找到你需要的版本</li><li>去官网下载（官网，官网，官网）通常命名规则 cuda_10.2.168_418.67_linux.run</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>sudo sh cuda_10.3.168_418.67_linux.run==========================accept接下来会让你选择需要安装的项目其中第一个是驱动，这个我目前没有试过在没有驱动的情况下用这个安装，我通常都是取消这个。另外，samples 是做cuda开发的，只是用的话也可以不选。</code></pre><h4 id="安装之后测试"><a href="#安装之后测试" class="headerlink" title="安装之后测试"></a>安装之后测试</h4><pre><code>nvcc -V # 如果报错，不要担心</code></pre><ul><li>进入/usr/local/</li><li>查看是否有cuda与cuda-10.2等，进入可看到version.txt</li></ul><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><pre><code>sudo gedit ~/.bashrc</code></pre><p>在文件末尾加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;/usr/local/cuda-10.1/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">export LD_LIBRARY_PATH=&quot;/usr/lcoal/cuda-10.2/lib64:$LD_LIBRARY_PATH&quot;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：注意更改对应的cuda版本<br>最后使其生效</p><pre><code>source ~/.bashrc</code></pre><h3 id="嘿嘿！其实如果报错的话，还有一个很简单的方法"><a href="#嘿嘿！其实如果报错的话，还有一个很简单的方法" class="headerlink" title="嘿嘿！其实如果报错的话，还有一个很简单的方法"></a>嘿嘿！其实如果报错的话，还有一个很简单的方法</h3><p>安装 anaconda 之后在 激活环境之后 通过conda安装pyorch时，我发现cuda 也会安装好在/usr/local/。 所以，通过安装cuda也是可行的</p><pre><code>conda  install cudatoolkit=10.1</code></pre><p>嫌慢的话换源：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --set show_channel_urls yes #设置搜索时显示通道地址</span><br></pre></td></tr></table></figure><hr><h2 id="pyroch安装"><a href="#pyroch安装" class="headerlink" title="pyroch安装"></a>pyroch安装</h2><p>直接通过官网找到对应的版本安装方式即可</p><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>pip install torch==1.5.1+cu101 torchvision==0.6.1+cu101 -f <a href="https://download.pytorch.org/whl/torch_stable.html" target="_blank" rel="noopener">https://download.pytorch.org/whl/torch_stable.html</a></p><p>嫌慢的话换源（最新版的可以）</p><pre><code>pip install torch torchvision -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>新手村，成长记录！</p>]]></content>
      
      
      
        <tags>
            
            <tag> cuda </tag>
            
            <tag> pytorch </tag>
            
            <tag> nvidia </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置python与virtualenv</title>
      <link href="/2020/07/18/%E9%85%8D%E7%BD%AEpython%E4%B8%8Evirtualenv/"/>
      <url>/2020/07/18/%E9%85%8D%E7%BD%AEpython%E4%B8%8Evirtualenv/</url>
      
        <content type="html"><![CDATA[<h4 id="python2与python3发生冲突"><a href="#python2与python3发生冲突" class="headerlink" title="python2与python3发生冲突"></a>python2与python3发生冲突</h4><p>1.卸载python2.7  </p><pre><code>sudo apt-get remove python2.7</code></pre><p>127.0.0.1<br>2.卸载python2.7及其依赖  </p><pre><code>sudo apt-get remove --auto-remove python2.7</code></pre><p>3.消除python2.7  </p><pre><code>sudo apt-get purge python2.7 or sudo apt-get purge --auto-remove python2.7</code></pre><h4 id="python3-和-安装虚拟环境"><a href="#python3-和-安装虚拟环境" class="headerlink" title="python3 和 安装虚拟环境"></a>python3 和 安装虚拟环境</h4><pre><code>sudo apt updatesudo apt install python3-dev python3-pipsudo pip3 install -U virtualenv  # system-wide install</code></pre><h5 id="mkdir-environment-cd-environment"><a href="#mkdir-environment-cd-environment" class="headerlink" title="mkdir environment + cd environment"></a>mkdir environment + cd environment</h5><h5 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h5><pre><code># 创建环境virtualenv --system-site-packages -p python3 ./tf_py3# 激活环境source ./tf_py3/bin/activate  # sh, bash, ksh, or zsh# 升级pippip install --upgrade pippip list  # show packages installed within the virtual environment# 退出环境用 （不退出）deactivate  # don&apos;t exit until you&apos;re done using TensorFlow</code></pre><h5 id="安装tf"><a href="#安装tf" class="headerlink" title="安装tf"></a>安装tf</h5><pre><code>pip install --upgrade tensorflowpip install numpy matplotlib sklearn pandas jupyter</code></pre><h4 id="配置jupyter远程"><a href="#配置jupyter远程" class="headerlink" title="配置jupyter远程"></a>配置jupyter远程</h4><h5 id="1-查看主目录下是否有-jupyter文件夹"><a href="#1-查看主目录下是否有-jupyter文件夹" class="headerlink" title="1.查看主目录下是否有.jupyter文件夹"></a>1.查看主目录下是否有.jupyter文件夹</h5><p>没有则创建一个  </p><pre><code>jupyter notebook --generate-config</code></pre><h5 id="2-进入-jupyter"><a href="#2-进入-jupyter" class="headerlink" title="2. 进入.jupyter"></a>2. 进入.jupyter</h5><pre><code>vim jupyter_notebook_config.py修改如下内容：c= get_config()c.NotebookApp.ip = &apos;*&apos;c.NotebookApp.open_browser = Falsec.NotebookApp.port = 6006c.NotebookApp.allow_remote_access = Truec.NotebookApp.allow_root = True</code></pre><h5 id="3-创建workspace文件夹"><a href="#3-创建workspace文件夹" class="headerlink" title="3. 创建workspace文件夹"></a>3. 创建workspace文件夹</h5><pre><code>mkdir workspacecd workspacejupyter notebook</code></pre><h5 id="4-token输入上创建密码即可"><a href="#4-token输入上创建密码即可" class="headerlink" title="4. token输入上创建密码即可"></a>4. token输入上创建密码即可</h5>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cuda多版本间切换</title>
      <link href="/2020/07/18/cuda%E5%A4%9A%E7%89%88%E6%9C%AC%E9%97%B4%E5%88%87%E6%8D%A2/"/>
      <url>/2020/07/18/cuda%E5%A4%9A%E7%89%88%E6%9C%AC%E9%97%B4%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="切换cuda版本"><a href="#切换cuda版本" class="headerlink" title="切换cuda版本"></a>切换cuda版本</h3><p>主要是进入 /usr/local/ 目录下用stat命令查看cuda链接情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat cuda</span><br></pre></td></tr></table></figure><p>然后删掉原来的链接，建立新的链接，不需要修改 ~/.bashrc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf cuda</span><br><span class="line">sudo ln -s /usr/local/cuda-9.0 /usr/local/cuda</span><br></pre></td></tr></table></figure><pre><code>注：cuda文件一般在 /usr/local/   ls查看文件价名字</code></pre><h3 id="查看cuda版本"><a href="#查看cuda版本" class="headerlink" title="查看cuda版本"></a>查看cuda版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/cuda/version.txt</span><br><span class="line"></span><br><span class="line">nvcc --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> cuda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch中数据转换</title>
      <link href="/2020/07/18/pytorch%E4%B8%AD%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/07/18/pytorch%E4%B8%AD%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-CPU-tensor转GPU-tensor："><a href="#1-CPU-tensor转GPU-tensor：" class="headerlink" title="1. CPU tensor转GPU tensor："></a>1. CPU tensor转GPU tensor：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpu_data.cuda()</span><br></pre></td></tr></table></figure><h3 id="2-GPU-tensor-转CPU-tensor："><a href="#2-GPU-tensor-转CPU-tensor：" class="headerlink" title="2. GPU tensor 转CPU tensor："></a>2. GPU tensor 转CPU tensor：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpu_data.cpu()</span><br></pre></td></tr></table></figure><h3 id="3-numpy转为CPU-tensor："><a href="#3-numpy转为CPU-tensor：" class="headerlink" title="3. numpy转为CPU tensor："></a>3. numpy转为CPU tensor：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.from_numpy(np_data)</span><br></pre></td></tr></table></figure><h3 id="4-CPU-tensor转为numpy数据："><a href="#4-CPU-tensor转为numpy数据：" class="headerlink" title="4.CPU tensor转为numpy数据："></a>4.CPU tensor转为numpy数据：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpu_data.numpy()</span><br></pre></td></tr></table></figure><pre><code>注：1.note：GPU tensor不能直接转为numpy数组，必须先转到CPU tensor。2.torch.from_numpy(array)是做数组的浅拷贝，torch.Tensor(array)是做数组的深拷贝（浅拷贝映射指针；深拷贝完全复制）</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 挂载硬盘</title>
      <link href="/2020/07/18/ubuntu-%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
      <url>/2020/07/18/ubuntu-%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h3 id="ubuntu18-04-挂载硬盘"><a href="#ubuntu18-04-挂载硬盘" class="headerlink" title="ubuntu18.04 挂载硬盘"></a>ubuntu18.04 挂载硬盘</h3><h4 id="1-确定挂载位置，新建文件夹"><a href="#1-确定挂载位置，新建文件夹" class="headerlink" title="1.确定挂载位置，新建文件夹"></a>1.确定挂载位置，新建文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /media/example</span><br></pre></td></tr></table></figure><h4 id="2-修改系统文件"><a href="#2-修改系统文件" class="headerlink" title="2.修改系统文件"></a>2.修改系统文件</h4><h5 id="查看需要被挂载的名称"><a href="#查看需要被挂载的名称" class="headerlink" title="查看需要被挂载的名称"></a>查看需要被挂载的名称</h5><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/dev/sdb4</span><br><span class="line">/dev/sdc2</span><br><span class="line">查看方式：打开文件管理，其他位置；或者磁盘工具 或者df -hl</span><br></pre></td></tr></table></figure><h5 id="查看需要被挂载磁盘的分区UUID"><a href="#查看需要被挂载磁盘的分区UUID" class="headerlink" title="查看需要被挂载磁盘的分区UUID"></a>查看需要被挂载磁盘的分区UUID</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid</span><br><span class="line">找到 对应的UUID与type</span><br></pre></td></tr></table></figure><h5 id="打开系统文件"><a href="#打开系统文件" class="headerlink" title="打开系统文件"></a>打开系统文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">打开之后复制第一行UUID</span><br><span class="line">sudo gedit /etc/fstab</span><br></pre></td></tr></table></figure><ul><li>把对应的UUID 与type 修改为刚刚查到的</li><li>在UUID 后加入/media/example</li><li>把errors=remount-ro改为defaults，后面的1改0</li></ul><h5 id="重启即可"><a href="#重启即可" class="headerlink" title="重启即可"></a>重启即可</h5>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvidia-smi报错</title>
      <link href="/2019/12/28/nvidia-smi%E6%8A%A5%E9%94%99/"/>
      <url>/2019/12/28/nvidia-smi%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h2 id="nvidai-smi-命令报错"><a href="#nvidai-smi-命令报错" class="headerlink" title="nvidai-smi 命令报错"></a>nvidai-smi 命令报错</h2><p><em>服务器配置一览: RTX 2080ti, cuda9</em></p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><p>最近服务器不知什么原因，在查看显卡使用率的时候(nvidia-smi)报如下错误：  </p><p><img src="/2019/12/28/nvidia-smi报错/001.png" alt="问题截图"></p><p>我根据提示重启了不止一次,但重启过后还是报这个错。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>vim /etc/default/grub, 在GRUB_CMDLINE_LINUX_DEFAULT 值里面添加<br>acpi=noirq(空格) thermal.off=1<br>强制保存重启</p><p>例如：GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash acpi=noirq thermal.off=1”</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>修改过后的确nvidia-smi就不报错了。但具体原理我不清楚。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建有图的博客</title>
      <link href="/2019/12/22/%E6%96%B0%E5%BB%BA%E6%9C%89%E5%9B%BE%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/12/22/%E6%96%B0%E5%BB%BA%E6%9C%89%E5%9B%BE%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><p>hexo n ‘blog_name’</p><h2 id="编写博文"><a href="#编写博文" class="headerlink" title="编写博文"></a>编写博文</h2><p>打开名为 blog_name的.md文件 (推荐 使用有道云笔记编写markdown格式博文,写完后, ctrl+a,ctrl+c,ctrl+v搞定)  </p><h2 id="多标签格式"><a href="#多标签格式" class="headerlink" title="多标签格式"></a>多标签格式</h2><p>tags:[tag1, tag2, …,tagn]</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>1.确认根目录下_config.yml 中的 post_asset_folder:(此处有空格)true<br>2.在hexo的根目录下执行 npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save<br>(我Fork的链接: <a href="https://github.com/xilixixili/hexo-asset-image.git" target="_blank" rel="noopener">https://github.com/xilixixili/hexo-asset-image.git</a>)<br>3.hexo n ‘blog_name’<br>执行过1、2两步后，此时会在_posts目录里出现一个与博文名字相同的文件夹，把你需要插入的图片放入就可以了。<br>4.hexo–markdown 图片引用格式如下:<br><strong>![插图注释](blog_name/image001.png)</strong></p><h2 id="生成博客"><a href="#生成博客" class="headerlink" title="生成博客"></a>生成博客</h2><p><strong>hexo g –&gt;hexo s</strong><br><strong>推送 hexo d</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED</title>
      <link href="/2019/12/22/Pytorch-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED/"/>
      <url>/2019/12/22/Pytorch-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED/</url>
      
        <content type="html"><![CDATA[<h2 id="RuntimeError-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED"><a href="#RuntimeError-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED" class="headerlink" title="RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED"></a>RuntimeError: cuDNN error: CUDNN_STATUS_EXECUTION_FAILED</h2><p><em>服务器配置一览: RTX 2080ti,cuda9</em></p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><p>在使用pytorch中预训练好的inception_v3网络跑自己实验的时候出现  </p><p><img src="/2019/12/22/Pytorch-cuDNN-error-CUDNN-STATUS-EXECUTION-FAILED/001.png" alt="问题截图"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:"></a>解决办法:</h3><p>网上常见的方法汇总:</p><ol><li><strong>重装cuda版本</strong> (RTX20180ti 与cuda9的适用性不如cuda10)</li><li><strong>torch.backends.cudnn.enabled = False</strong> (默认为ture，在调用包的后面加入即可)</li></ol><h3 id="我使用的方法"><a href="#我使用的方法" class="headerlink" title="我使用的方法"></a>我使用的方法</h3><p>比较懒，所以方法2</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>(摘录)</strong> 关于torch.backends.cudnn.enabled 的使用：</p><p>设置这个 flag 可以让内置的 cuDNN 的 auto-tuner 自动寻找最适合当前配置的高效算法，来达到优化运行效率的问题。</p><p>应该遵循以下准则：</p><p>如果网络的输入数据维度或类型上变化不大，置为true 可以增加运行效率；<br>如果网络的输入数据在每次 iteration 都变化的话，会导致 cnDNN 每次都会去寻找一遍最优配置，这样反而会降低运行效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> RuntimeError </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
